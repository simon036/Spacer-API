openapi: 3.0.3
info:
  title: Spacer API
  version: 1.0.0
  description: |
    API documentation for the Spacer platform backend.
    Features: JWT auth, user/space/booking management, email verification, Cloudinary uploads, and more.
servers:
  - url: http://localhost:5000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        email: { type: string, example: "user@example.com" }
        role: { type: string, example: "client" }
        is_active: { type: boolean, example: true }
        created_at: { type: string, format: date-time }
    Space:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Conference Room" }
        description: { type: string, example: "A spacious conference room." }
        image_url: { type: string, example: "https://res.cloudinary.com/demo/image/upload/v1234567890/spaces/room.jpg" }
        price_per_hour: { type: number, format: float, example: 100.0 }
        status: { type: string, example: "available" }
        owner_id: { type: integer, example: 2 }
        created_at: { type: string, format: date-time }
    Booking:
      type: object
      properties:
        id: { type: integer, example: 1 }
        user_id: { type: integer, example: 2 }
        space_id: { type: integer, example: 1 }
        start_time: { type: string, format: date-time, example: "2024-06-01T10:00:00" }
        end_time: { type: string, format: date-time, example: "2024-06-01T12:00:00" }
        amount: { type: number, format: float, example: 200.0 }
        status: { type: string, example: "confirmed" }
        created_at: { type: string, format: date-time }
    Error:
      type: object
      properties:
        error: { type: string, example: "Not found" }
    Message:
      type: object
      properties:
        message: { type: string, example: "Operation successful" }

security:
  - bearerAuth: []

paths:

  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: "user@example.com" }
                password: { type: string, example: "password123" }
                role: { type: string, example: "client" }
              required: [email, password]
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify/{token}:
    get:
      tags: [Auth]
      summary: Verify email with token
      parameters:
        - in: path
          name: token
          schema: { type: string }
          required: true
      responses:
        200:
          description: Email verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        400:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  user: { $ref: '#/components/schemas/User' }
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/password-reset/request:
    post:
      tags: [Auth]
      summary: Request password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
              required: [email]
      responses:
        200:
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/password-reset/confirm/{token}:
    post:
      tags: [Auth]
      summary: Confirm password reset with token
      parameters:
        - in: path
          name: token
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password: { type: string }
              required: [password]
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        400:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/:
    get:
      tags: [Users]
      summary: List all users (admin only, paginated)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: per_page
          schema: { type: integer }
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total: { type: integer }
                  pages: { type: integer }
                  current_page: { type: integer }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [Users]
      summary: Create a new user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
                role: { type: string }
              required: [email, password, role]
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_id}:
    put:
      tags: [Users]
      summary: Update a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role: { type: string }
                is_active: { type: boolean }
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Users]
      summary: Delete a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema: { type: integer }
          required: true
      responses:
        200:
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /spaces/:
    get:
      tags: [Spaces]
      summary: List all spaces (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: per_page
          schema: { type: integer }
      responses:
        200:
          description: List of spaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Space'
                  total: { type: integer }
                  pages: { type: integer }
                  current_page: { type: integer }

    post:
      tags: [Spaces]
      summary: Create a new space (admin/owner, supports image upload)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                price_per_hour: { type: number, format: float }
                image:
                  type: string
                  format: binary
              required: [name, description, price_per_hour]
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                price_per_hour: { type: number, format: float }
              required: [name, description, price_per_hour]
      responses:
        201:
          description: Space created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /spaces/{space_id}:
    get:
      tags: [Spaces]
      summary: Get details of a space
      parameters:
        - in: path
          name: space_id
          schema: { type: integer }
          required: true
      responses:
        200:
          description: Space details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
        404:
          description: Space not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [Spaces]
      summary: Update a space (admin/owner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: space_id
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                price_per_hour: { type: number, format: float }
                status: { type: string }
      responses:
        200:
          description: Space updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Space not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Spaces]
      summary: Delete a space (admin/owner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: space_id
          schema: { type: integer }
          required: true
      responses:
        200:
          description: Space deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Space not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/:
    get:
      tags: [Bookings]
      summary: List all bookings for the current user (paginated)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: per_page
          schema: { type: integer }
      responses:
        200:
          description: List of bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
                  total: { type: integer }
                  pages: { type: integer }
                  current_page: { type: integer }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [Bookings]
      summary: Create a new booking
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                space_id: { type: integer }
                start_time: { type: string, format: date-time }
                end_time: { type: string, format: date-time }
              required: [space_id, start_time, end_time]
      responses:
        201:
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        400:
          description: Validation error or business rule violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/{booking_id}:
    get:
      tags: [Bookings]
      summary: Get details of a booking
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: booking_id
          schema: { type: integer }
          required: true
      responses:
        200:
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/{booking_id}/cancel:
    post:
      tags: [Bookings]
      summary: Cancel a booking
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: booking_id
          schema: { type: integer }
          required: true
      responses:
        200:
          description: Booking cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Cannot cancel booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/stats:
    get:
      tags: [Admin]
      summary: Get platform statistics (admin only)
      security:
        - bearerAuth: []
      responses:
        200:
          description: Platform statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users: { type: integer }
                  total_spaces: { type: integer }
                  total_bookings: { type: integer }
                  total_revenue: { type: number, format: float }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
